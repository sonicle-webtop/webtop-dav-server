<?php
/**
 * DavApi
 * PHP version 5
 *
 * @category Class
 * @package  WT\Client\Calendar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WebTop Calendar
 *
 * This is Calendar service API enpoint.
 *
 * OpenAPI spec version: v2
 * Contact: dev-team@sonicle.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WT\Client\Calendar\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WT\Client\Calendar\ApiException;
use WT\Client\Calendar\Configuration;
use WT\Client\Calendar\HeaderSelector;
use WT\Client\Calendar\ObjectSerializer;

/**
 * DavApi Class Doc Comment
 *
 * @category Class
 * @package  WT\Client\Calendar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DavApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client(['verify' => false]);
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addCalObject
     *
     * Adds a new calendar object
     *
     * @param  \WT\Client\Calendar\Model\DavCalObjectNew $body body (required)
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addCalObject($body, $calendarUid)
    {
        $this->addCalObjectWithHttpInfo($body, $calendarUid);
    }

    /**
     * Operation addCalObjectWithHttpInfo
     *
     * Adds a new calendar object
     *
     * @param  \WT\Client\Calendar\Model\DavCalObjectNew $body (required)
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCalObjectWithHttpInfo($body, $calendarUid)
    {
        $returnType = '';
        $request = $this->addCalObjectRequest($body, $calendarUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addCalObjectAsync
     *
     * Adds a new calendar object
     *
     * @param  \WT\Client\Calendar\Model\DavCalObjectNew $body (required)
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCalObjectAsync($body, $calendarUid)
    {
        return $this->addCalObjectAsyncWithHttpInfo($body, $calendarUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCalObjectAsyncWithHttpInfo
     *
     * Adds a new calendar object
     *
     * @param  \WT\Client\Calendar\Model\DavCalObjectNew $body (required)
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCalObjectAsyncWithHttpInfo($body, $calendarUid)
    {
        $returnType = '';
        $request = $this->addCalObjectRequest($body, $calendarUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCalObject'
     *
     * @param  \WT\Client\Calendar\Model\DavCalObjectNew $body (required)
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addCalObjectRequest($body, $calendarUid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addCalObject'
            );
        }
        // verify the required parameter 'calendarUid' is set
        if ($calendarUid === null || (is_array($calendarUid) && count($calendarUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calendarUid when calling addCalObject'
            );
        }

        $resourcePath = '/caldav/calendars/{calendarUid}/objects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($calendarUid !== null) {
            $resourcePath = str_replace(
                '{' . 'calendarUid' . '}',
                ObjectSerializer::toPathValue($calendarUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // PULL REQUEST -->
        $defaultHeaders = $this->config->getDefaultHeaders();
        // <-- PULL REQUEST
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addCalendar
     *
     * Adds a new calendar
     *
     * @param  \WT\Client\Calendar\Model\DavCalendarNew $body body (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Calendar\Model\DavCalendar
     */
    public function addCalendar($body)
    {
        list($response) = $this->addCalendarWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addCalendarWithHttpInfo
     *
     * Adds a new calendar
     *
     * @param  \WT\Client\Calendar\Model\DavCalendarNew $body (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Calendar\Model\DavCalendar, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCalendarWithHttpInfo($body)
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalendar';
        $request = $this->addCalendarRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Calendar\Model\DavCalendar',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCalendarAsync
     *
     * Adds a new calendar
     *
     * @param  \WT\Client\Calendar\Model\DavCalendarNew $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCalendarAsync($body)
    {
        return $this->addCalendarAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCalendarAsyncWithHttpInfo
     *
     * Adds a new calendar
     *
     * @param  \WT\Client\Calendar\Model\DavCalendarNew $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCalendarAsyncWithHttpInfo($body)
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalendar';
        $request = $this->addCalendarRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCalendar'
     *
     * @param  \WT\Client\Calendar\Model\DavCalendarNew $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addCalendarRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addCalendar'
            );
        }

        $resourcePath = '/caldav/calendars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // PULL REQUEST -->
        $defaultHeaders = $this->config->getDefaultHeaders();
        // <-- PULL REQUEST
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCalObject
     *
     * Deletes a calendar object
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCalObject($calendarUid, $href)
    {
        $this->deleteCalObjectWithHttpInfo($calendarUid, $href);
    }

    /**
     * Operation deleteCalObjectWithHttpInfo
     *
     * Deletes a calendar object
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCalObjectWithHttpInfo($calendarUid, $href)
    {
        $returnType = '';
        $request = $this->deleteCalObjectRequest($calendarUid, $href);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCalObjectAsync
     *
     * Deletes a calendar object
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalObjectAsync($calendarUid, $href)
    {
        return $this->deleteCalObjectAsyncWithHttpInfo($calendarUid, $href)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCalObjectAsyncWithHttpInfo
     *
     * Deletes a calendar object
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalObjectAsyncWithHttpInfo($calendarUid, $href)
    {
        $returnType = '';
        $request = $this->deleteCalObjectRequest($calendarUid, $href);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCalObject'
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCalObjectRequest($calendarUid, $href)
    {
        // verify the required parameter 'calendarUid' is set
        if ($calendarUid === null || (is_array($calendarUid) && count($calendarUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calendarUid when calling deleteCalObject'
            );
        }
        // verify the required parameter 'href' is set
        if ($href === null || (is_array($href) && count($href) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $href when calling deleteCalObject'
            );
        }

        $resourcePath = '/caldav/calendars/{calendarUid}/objects/{href}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($calendarUid !== null) {
            $resourcePath = str_replace(
                '{' . 'calendarUid' . '}',
                ObjectSerializer::toPathValue($calendarUid),
                $resourcePath
            );
        }
        // path params
        if ($href !== null) {
            $resourcePath = str_replace(
                '{' . 'href' . '}',
                ObjectSerializer::toPathValue($href),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // PULL REQUEST -->
        $defaultHeaders = $this->config->getDefaultHeaders();
        // <-- PULL REQUEST
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCalendar
     *
     * Deletes a calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCalendar($calendarUid)
    {
        $this->deleteCalendarWithHttpInfo($calendarUid);
    }

    /**
     * Operation deleteCalendarWithHttpInfo
     *
     * Deletes a calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCalendarWithHttpInfo($calendarUid)
    {
        $returnType = '';
        $request = $this->deleteCalendarRequest($calendarUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCalendarAsync
     *
     * Deletes a calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalendarAsync($calendarUid)
    {
        return $this->deleteCalendarAsyncWithHttpInfo($calendarUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCalendarAsyncWithHttpInfo
     *
     * Deletes a calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalendarAsyncWithHttpInfo($calendarUid)
    {
        $returnType = '';
        $request = $this->deleteCalendarRequest($calendarUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCalendar'
     *
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCalendarRequest($calendarUid)
    {
        // verify the required parameter 'calendarUid' is set
        if ($calendarUid === null || (is_array($calendarUid) && count($calendarUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calendarUid when calling deleteCalendar'
            );
        }

        $resourcePath = '/caldav/calendars/{calendarUid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($calendarUid !== null) {
            $resourcePath = str_replace(
                '{' . 'calendarUid' . '}',
                ObjectSerializer::toPathValue($calendarUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // PULL REQUEST -->
        $defaultHeaders = $this->config->getDefaultHeaders();
        // <-- PULL REQUEST
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalObject
     *
     * Get a single calendar object
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Calendar\Model\DavCalObject
     */
    public function getCalObject($calendarUid, $href)
    {
        list($response) = $this->getCalObjectWithHttpInfo($calendarUid, $href);
        return $response;
    }

    /**
     * Operation getCalObjectWithHttpInfo
     *
     * Get a single calendar object
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Calendar\Model\DavCalObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalObjectWithHttpInfo($calendarUid, $href)
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalObject';
        $request = $this->getCalObjectRequest($calendarUid, $href);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Calendar\Model\DavCalObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalObjectAsync
     *
     * Get a single calendar object
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalObjectAsync($calendarUid, $href)
    {
        return $this->getCalObjectAsyncWithHttpInfo($calendarUid, $href)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalObjectAsyncWithHttpInfo
     *
     * Get a single calendar object
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalObjectAsyncWithHttpInfo($calendarUid, $href)
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalObject';
        $request = $this->getCalObjectRequest($calendarUid, $href);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalObject'
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalObjectRequest($calendarUid, $href)
    {
        // verify the required parameter 'calendarUid' is set
        if ($calendarUid === null || (is_array($calendarUid) && count($calendarUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calendarUid when calling getCalObject'
            );
        }
        // verify the required parameter 'href' is set
        if ($href === null || (is_array($href) && count($href) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $href when calling getCalObject'
            );
        }

        $resourcePath = '/caldav/calendars/{calendarUid}/objects/{href}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($calendarUid !== null) {
            $resourcePath = str_replace(
                '{' . 'calendarUid' . '}',
                ObjectSerializer::toPathValue($calendarUid),
                $resourcePath
            );
        }
        // path params
        if ($href !== null) {
            $resourcePath = str_replace(
                '{' . 'href' . '}',
                ObjectSerializer::toPathValue($href),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // PULL REQUEST -->
        $defaultHeaders = $this->config->getDefaultHeaders();
        // <-- PULL REQUEST
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalObjects
     *
     * List all calendar objects belonging to a specific calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string[] $hrefs hrefs (optional)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Calendar\Model\DavCalObject[]
     */
    public function getCalObjects($calendarUid, $hrefs = null)
    {
        list($response) = $this->getCalObjectsWithHttpInfo($calendarUid, $hrefs);
        return $response;
    }

    /**
     * Operation getCalObjectsWithHttpInfo
     *
     * List all calendar objects belonging to a specific calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string[] $hrefs (optional)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Calendar\Model\DavCalObject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalObjectsWithHttpInfo($calendarUid, $hrefs = null)
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalObject[]';
        $request = $this->getCalObjectsRequest($calendarUid, $hrefs);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Calendar\Model\DavCalObject[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalObjectsAsync
     *
     * List all calendar objects belonging to a specific calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string[] $hrefs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalObjectsAsync($calendarUid, $hrefs = null)
    {
        return $this->getCalObjectsAsyncWithHttpInfo($calendarUid, $hrefs)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalObjectsAsyncWithHttpInfo
     *
     * List all calendar objects belonging to a specific calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string[] $hrefs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalObjectsAsyncWithHttpInfo($calendarUid, $hrefs = null)
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalObject[]';
        $request = $this->getCalObjectsRequest($calendarUid, $hrefs);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalObjects'
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string[] $hrefs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalObjectsRequest($calendarUid, $hrefs = null)
    {
        // verify the required parameter 'calendarUid' is set
        if ($calendarUid === null || (is_array($calendarUid) && count($calendarUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calendarUid when calling getCalObjects'
            );
        }

        $resourcePath = '/caldav/calendars/{calendarUid}/objects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        // PULL REQUEST -->
        if (is_array($hrefs)) {
            //$hrefs = ObjectSerializer::serializeCollection($hrefs, 'csv', true);
			$queryParams['hrefs'] = $hrefs;
        }
        // <-- PULL REQUEST

        // path params
        if ($calendarUid !== null) {
            $resourcePath = str_replace(
                '{' . 'calendarUid' . '}',
                ObjectSerializer::toPathValue($calendarUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // PULL REQUEST -->
        $defaultHeaders = $this->config->getDefaultHeaders();
        // <-- PULL REQUEST
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalObjectsChanges
     *
     * Get calendar object changes
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $syncToken Marks changes starting point (optional)
     * @param  int $limit Limits the number of returned results (optional)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Calendar\Model\DavCalObjectsChanges
     */
    public function getCalObjectsChanges($calendarUid, $syncToken = null, $limit = null)
    {
        list($response) = $this->getCalObjectsChangesWithHttpInfo($calendarUid, $syncToken, $limit);
        return $response;
    }

    /**
     * Operation getCalObjectsChangesWithHttpInfo
     *
     * Get calendar object changes
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $syncToken Marks changes starting point (optional)
     * @param  int $limit Limits the number of returned results (optional)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Calendar\Model\DavCalObjectsChanges, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalObjectsChangesWithHttpInfo($calendarUid, $syncToken = null, $limit = null)
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalObjectsChanges';
        $request = $this->getCalObjectsChangesRequest($calendarUid, $syncToken, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Calendar\Model\DavCalObjectsChanges',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalObjectsChangesAsync
     *
     * Get calendar object changes
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $syncToken Marks changes starting point (optional)
     * @param  int $limit Limits the number of returned results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalObjectsChangesAsync($calendarUid, $syncToken = null, $limit = null)
    {
        return $this->getCalObjectsChangesAsyncWithHttpInfo($calendarUid, $syncToken, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalObjectsChangesAsyncWithHttpInfo
     *
     * Get calendar object changes
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $syncToken Marks changes starting point (optional)
     * @param  int $limit Limits the number of returned results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalObjectsChangesAsyncWithHttpInfo($calendarUid, $syncToken = null, $limit = null)
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalObjectsChanges';
        $request = $this->getCalObjectsChangesRequest($calendarUid, $syncToken, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalObjectsChanges'
     *
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $syncToken Marks changes starting point (optional)
     * @param  int $limit Limits the number of returned results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalObjectsChangesRequest($calendarUid, $syncToken = null, $limit = null)
    {
        // verify the required parameter 'calendarUid' is set
        if ($calendarUid === null || (is_array($calendarUid) && count($calendarUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calendarUid when calling getCalObjectsChanges'
            );
        }

        $resourcePath = '/caldav/calendars/{calendarUid}/objects/changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($syncToken !== null) {
            $queryParams['syncToken'] = ObjectSerializer::toQueryValue($syncToken);
        }
        // <-- PULL REQUEST
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // <-- PULL REQUEST

        // path params
        if ($calendarUid !== null) {
            $resourcePath = str_replace(
                '{' . 'calendarUid' . '}',
                ObjectSerializer::toPathValue($calendarUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // PULL REQUEST -->
        $defaultHeaders = $this->config->getDefaultHeaders();
        // <-- PULL REQUEST
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalendar
     *
     * Gets a single calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Calendar\Model\DavCalendar
     */
    public function getCalendar($calendarUid)
    {
        list($response) = $this->getCalendarWithHttpInfo($calendarUid);
        return $response;
    }

    /**
     * Operation getCalendarWithHttpInfo
     *
     * Gets a single calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Calendar\Model\DavCalendar, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalendarWithHttpInfo($calendarUid)
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalendar';
        $request = $this->getCalendarRequest($calendarUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Calendar\Model\DavCalendar',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalendarAsync
     *
     * Gets a single calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarAsync($calendarUid)
    {
        return $this->getCalendarAsyncWithHttpInfo($calendarUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalendarAsyncWithHttpInfo
     *
     * Gets a single calendar
     *
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarAsyncWithHttpInfo($calendarUid)
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalendar';
        $request = $this->getCalendarRequest($calendarUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalendar'
     *
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalendarRequest($calendarUid)
    {
        // verify the required parameter 'calendarUid' is set
        if ($calendarUid === null || (is_array($calendarUid) && count($calendarUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calendarUid when calling getCalendar'
            );
        }

        $resourcePath = '/caldav/calendars/{calendarUid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($calendarUid !== null) {
            $resourcePath = str_replace(
                '{' . 'calendarUid' . '}',
                ObjectSerializer::toPathValue($calendarUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // PULL REQUEST -->
        $defaultHeaders = $this->config->getDefaultHeaders();
        // <-- PULL REQUEST
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalendars
     *
     * List all calendars
     *
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Calendar\Model\DavCalendar[]
     */
    public function getCalendars()
    {
        list($response) = $this->getCalendarsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCalendarsWithHttpInfo
     *
     * List all calendars
     *
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Calendar\Model\DavCalendar[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalendarsWithHttpInfo()
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalendar[]';
        $request = $this->getCalendarsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Calendar\Model\DavCalendar[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalendarsAsync
     *
     * List all calendars
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarsAsync()
    {
        return $this->getCalendarsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalendarsAsyncWithHttpInfo
     *
     * List all calendars
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarsAsyncWithHttpInfo()
    {
        $returnType = '\WT\Client\Calendar\Model\DavCalendar[]';
        $request = $this->getCalendarsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalendars'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalendarsRequest()
    {

        $resourcePath = '/caldav/calendars';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // PULL REQUEST -->
        $defaultHeaders = $this->config->getDefaultHeaders();
        // <-- PULL REQUEST
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCalObject
     *
     * Updates a calendar object
     *
     * @param  string $body body (required)
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateCalObject($body, $calendarUid, $href)
    {
        $this->updateCalObjectWithHttpInfo($body, $calendarUid, $href);
    }

    /**
     * Operation updateCalObjectWithHttpInfo
     *
     * Updates a calendar object
     *
     * @param  string $body (required)
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCalObjectWithHttpInfo($body, $calendarUid, $href)
    {
        $returnType = '';
        $request = $this->updateCalObjectRequest($body, $calendarUid, $href);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateCalObjectAsync
     *
     * Updates a calendar object
     *
     * @param  string $body (required)
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCalObjectAsync($body, $calendarUid, $href)
    {
        return $this->updateCalObjectAsyncWithHttpInfo($body, $calendarUid, $href)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCalObjectAsyncWithHttpInfo
     *
     * Updates a calendar object
     *
     * @param  string $body (required)
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCalObjectAsyncWithHttpInfo($body, $calendarUid, $href)
    {
        $returnType = '';
        $request = $this->updateCalObjectRequest($body, $calendarUid, $href);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCalObject'
     *
     * @param  string $body (required)
     * @param  string $calendarUid Calendar UID (required)
     * @param  string $href CalObject reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCalObjectRequest($body, $calendarUid, $href)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateCalObject'
            );
        }
        // verify the required parameter 'calendarUid' is set
        if ($calendarUid === null || (is_array($calendarUid) && count($calendarUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calendarUid when calling updateCalObject'
            );
        }
        // verify the required parameter 'href' is set
        if ($href === null || (is_array($href) && count($href) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $href when calling updateCalObject'
            );
        }

        $resourcePath = '/caldav/calendars/{calendarUid}/objects/{href}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($calendarUid !== null) {
            $resourcePath = str_replace(
                '{' . 'calendarUid' . '}',
                ObjectSerializer::toPathValue($calendarUid),
                $resourcePath
            );
        }
        // path params
        if ($href !== null) {
            $resourcePath = str_replace(
                '{' . 'href' . '}',
                ObjectSerializer::toPathValue($href),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['text/calendar']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // PULL REQUEST -->
        $defaultHeaders = $this->config->getDefaultHeaders();
        // <-- PULL REQUEST
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCalendar
     *
     * Updates a calendar
     *
     * @param  \WT\Client\Calendar\Model\DavCalendarUpdate $body body (required)
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateCalendar($body, $calendarUid)
    {
        $this->updateCalendarWithHttpInfo($body, $calendarUid);
    }

    /**
     * Operation updateCalendarWithHttpInfo
     *
     * Updates a calendar
     *
     * @param  \WT\Client\Calendar\Model\DavCalendarUpdate $body (required)
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws {{invokerPackage}}\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCalendarWithHttpInfo($body, $calendarUid)
    {
        $returnType = '';
        $request = $this->updateCalendarRequest($body, $calendarUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateCalendarAsync
     *
     * Updates a calendar
     *
     * @param  \WT\Client\Calendar\Model\DavCalendarUpdate $body (required)
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCalendarAsync($body, $calendarUid)
    {
        return $this->updateCalendarAsyncWithHttpInfo($body, $calendarUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCalendarAsyncWithHttpInfo
     *
     * Updates a calendar
     *
     * @param  \WT\Client\Calendar\Model\DavCalendarUpdate $body (required)
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCalendarAsyncWithHttpInfo($body, $calendarUid)
    {
        $returnType = '';
        $request = $this->updateCalendarRequest($body, $calendarUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCalendar'
     *
     * @param  \WT\Client\Calendar\Model\DavCalendarUpdate $body (required)
     * @param  string $calendarUid Calendar UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCalendarRequest($body, $calendarUid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateCalendar'
            );
        }
        // verify the required parameter 'calendarUid' is set
        if ($calendarUid === null || (is_array($calendarUid) && count($calendarUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calendarUid when calling updateCalendar'
            );
        }

        $resourcePath = '/caldav/calendars/{calendarUid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($calendarUid !== null) {
            $resourcePath = str_replace(
                '{' . 'calendarUid' . '}',
                ObjectSerializer::toPathValue($calendarUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        // PULL REQUEST -->
        $defaultHeaders = $this->config->getDefaultHeaders();
        // <-- PULL REQUEST
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
