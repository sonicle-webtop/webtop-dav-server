<?php
/**
 * SyncEventData
 *
 * PHP version 5
 *
 * @category Class
 * @package  WT\Client\Calendar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WebTop Calendar
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: dev-team@sonicle.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WT\Client\Calendar\Model;

use \ArrayAccess;
use \WT\Client\Calendar\ObjectSerializer;

/**
 * SyncEventData Class Doc Comment
 *
 * @category Class
 * @description Bean for carry event&#39;s updateable fields
 * @package  WT\Client\Calendar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SyncEventData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SyncEventData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start' => 'string',
        'end' => 'string',
        'tz' => 'string',
        'allDay' => 'bool',
        'organizer' => 'string',
        'title' => 'string',
        'description' => 'string',
        'location' => 'string',
        'prvt' => 'bool',
        'busy' => 'bool',
        'reminder' => 'int',
        'recRule' => 'string',
        'recStart' => 'string',
        'exDates' => 'string[]',
        'attendees' => '\WT\Client\Calendar\Model\SyncEventDataAttendee[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start' => null,
        'end' => null,
        'tz' => null,
        'allDay' => null,
        'organizer' => null,
        'title' => null,
        'description' => null,
        'location' => null,
        'prvt' => null,
        'busy' => null,
        'reminder' => null,
        'recRule' => null,
        'recStart' => null,
        'exDates' => null,
        'attendees' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start' => 'start',
        'end' => 'end',
        'tz' => 'tz',
        'allDay' => 'allDay',
        'organizer' => 'organizer',
        'title' => 'title',
        'description' => 'description',
        'location' => 'location',
        'prvt' => 'prvt',
        'busy' => 'busy',
        'reminder' => 'reminder',
        'recRule' => 'recRule',
        'recStart' => 'recStart',
        'exDates' => 'exDates',
        'attendees' => 'attendees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start' => 'setStart',
        'end' => 'setEnd',
        'tz' => 'setTz',
        'allDay' => 'setAllDay',
        'organizer' => 'setOrganizer',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'location' => 'setLocation',
        'prvt' => 'setPrvt',
        'busy' => 'setBusy',
        'reminder' => 'setReminder',
        'recRule' => 'setRecRule',
        'recStart' => 'setRecStart',
        'exDates' => 'setExDates',
        'attendees' => 'setAttendees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start' => 'getStart',
        'end' => 'getEnd',
        'tz' => 'getTz',
        'allDay' => 'getAllDay',
        'organizer' => 'getOrganizer',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'location' => 'getLocation',
        'prvt' => 'getPrvt',
        'busy' => 'getBusy',
        'reminder' => 'getReminder',
        'recRule' => 'getRecRule',
        'recStart' => 'getRecStart',
        'exDates' => 'getExDates',
        'attendees' => 'getAttendees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['tz'] = isset($data['tz']) ? $data['tz'] : null;
        $this->container['allDay'] = isset($data['allDay']) ? $data['allDay'] : null;
        $this->container['organizer'] = isset($data['organizer']) ? $data['organizer'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['prvt'] = isset($data['prvt']) ? $data['prvt'] : null;
        $this->container['busy'] = isset($data['busy']) ? $data['busy'] : null;
        $this->container['reminder'] = isset($data['reminder']) ? $data['reminder'] : null;
        $this->container['recRule'] = isset($data['recRule']) ? $data['recRule'] : null;
        $this->container['recStart'] = isset($data['recStart']) ? $data['recStart'] : null;
        $this->container['exDates'] = isset($data['exDates']) ? $data['exDates'] : null;
        $this->container['attendees'] = isset($data['attendees']) ? $data['attendees'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['end'] === null) {
            $invalidProperties[] = "'end' can't be null";
        }
        if ($this->container['tz'] === null) {
            $invalidProperties[] = "'tz' can't be null";
        }
        if ($this->container['allDay'] === null) {
            $invalidProperties[] = "'allDay' can't be null";
        }
        if ($this->container['organizer'] === null) {
            $invalidProperties[] = "'organizer' can't be null";
        }
        if ($this->container['prvt'] === null) {
            $invalidProperties[] = "'prvt' can't be null";
        }
        if ($this->container['busy'] === null) {
            $invalidProperties[] = "'busy' can't be null";
        }
        if ($this->container['attendees'] === null) {
            $invalidProperties[] = "'attendees' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['start'] === null) {
            return false;
        }
        if ($this->container['end'] === null) {
            return false;
        }
        if ($this->container['tz'] === null) {
            return false;
        }
        if ($this->container['allDay'] === null) {
            return false;
        }
        if ($this->container['organizer'] === null) {
            return false;
        }
        if ($this->container['prvt'] === null) {
            return false;
        }
        if ($this->container['busy'] === null) {
            return false;
        }
        if ($this->container['attendees'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets start
     *
     * @return string
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param string $start Start date/time (ISO date/time YYYYMMDD'T'HHMMSS'Z')
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return string
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param string $end End date/time (ISO date/time YYYYMMDD'T'HHMMSS'Z')
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets tz
     *
     * @return string
     */
    public function getTz()
    {
        return $this->container['tz'];
    }

    /**
     * Sets tz
     *
     * @param string $tz Timezone ID
     *
     * @return $this
     */
    public function setTz($tz)
    {
        $this->container['tz'] = $tz;

        return $this;
    }

    /**
     * Gets allDay
     *
     * @return bool
     */
    public function getAllDay()
    {
        return $this->container['allDay'];
    }

    /**
     * Sets allDay
     *
     * @param bool $allDay All day flag
     *
     * @return $this
     */
    public function setAllDay($allDay)
    {
        $this->container['allDay'] = $allDay;

        return $this;
    }

    /**
     * Gets organizer
     *
     * @return string
     */
    public function getOrganizer()
    {
        return $this->container['organizer'];
    }

    /**
     * Sets organizer
     *
     * @param string $organizer Organizer address (as RFC822)
     *
     * @return $this
     */
    public function setOrganizer($organizer)
    {
        $this->container['organizer'] = $organizer;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets prvt
     *
     * @return bool
     */
    public function getPrvt()
    {
        return $this->container['prvt'];
    }

    /**
     * Sets prvt
     *
     * @param bool $prvt Private flag
     *
     * @return $this
     */
    public function setPrvt($prvt)
    {
        $this->container['prvt'] = $prvt;

        return $this;
    }

    /**
     * Gets busy
     *
     * @return bool
     */
    public function getBusy()
    {
        return $this->container['busy'];
    }

    /**
     * Sets busy
     *
     * @param bool $busy Busy flag
     *
     * @return $this
     */
    public function setBusy($busy)
    {
        $this->container['busy'] = $busy;

        return $this;
    }

    /**
     * Gets reminder
     *
     * @return int
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     *
     * @param int $reminder Reminder
     *
     * @return $this
     */
    public function setReminder($reminder)
    {
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets recRule
     *
     * @return string
     */
    public function getRecRule()
    {
        return $this->container['recRule'];
    }

    /**
     * Sets recRule
     *
     * @param string $recRule Recurrence RULE string
     *
     * @return $this
     */
    public function setRecRule($recRule)
    {
        $this->container['recRule'] = $recRule;

        return $this;
    }

    /**
     * Gets recStart
     *
     * @return string
     */
    public function getRecStart()
    {
        return $this->container['recStart'];
    }

    /**
     * Sets recStart
     *
     * @param string $recStart Recurrence start date (ISO date YYYYMMDD)
     *
     * @return $this
     */
    public function setRecStart($recStart)
    {
        $this->container['recStart'] = $recStart;

        return $this;
    }

    /**
     * Gets exDates
     *
     * @return string[]
     */
    public function getExDates()
    {
        return $this->container['exDates'];
    }

    /**
     * Sets exDates
     *
     * @param string[] $exDates Excluded dates (ISO date YYYYMMDD)
     *
     * @return $this
     */
    public function setExDates($exDates)
    {
        $this->container['exDates'] = $exDates;

        return $this;
    }

    /**
     * Gets attendees
     *
     * @return \WT\Client\Calendar\Model\SyncEventDataAttendee[]
     */
    public function getAttendees()
    {
        return $this->container['attendees'];
    }

    /**
     * Sets attendees
     *
     * @param \WT\Client\Calendar\Model\SyncEventDataAttendee[] $attendees Appointment attendees
     *
     * @return $this
     */
    public function setAttendees($attendees)
    {
        $this->container['attendees'] = $attendees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


