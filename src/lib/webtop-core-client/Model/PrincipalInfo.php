<?php
/**
 * PrincipalInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  WT\Client\Core
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WebTop Core
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: dev-team@sonicle.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WT\Client\Core\Model;

use \ArrayAccess;
use \WT\Client\Core\ObjectSerializer;

/**
 * PrincipalInfo Class Doc Comment
 *
 * @category Class
 * @package  WT\Client\Core
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PrincipalInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PrincipalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'profileId' => 'string',
        'profileUsername' => 'string',
        'displayName' => 'string',
        'emailAddress' => 'string',
        'timezoneId' => 'string',
        'languageTag' => 'string',
        'evalPermRefs' => 'bool[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'profileId' => null,
        'profileUsername' => null,
        'displayName' => null,
        'emailAddress' => null,
        'timezoneId' => null,
        'languageTag' => null,
        'evalPermRefs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'profileId' => 'profileId',
        'profileUsername' => 'profileUsername',
        'displayName' => 'displayName',
        'emailAddress' => 'emailAddress',
        'timezoneId' => 'timezoneId',
        'languageTag' => 'languageTag',
        'evalPermRefs' => 'evalPermRefs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'profileId' => 'setProfileId',
        'profileUsername' => 'setProfileUsername',
        'displayName' => 'setDisplayName',
        'emailAddress' => 'setEmailAddress',
        'timezoneId' => 'setTimezoneId',
        'languageTag' => 'setLanguageTag',
        'evalPermRefs' => 'setEvalPermRefs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'profileId' => 'getProfileId',
        'profileUsername' => 'getProfileUsername',
        'displayName' => 'getDisplayName',
        'emailAddress' => 'getEmailAddress',
        'timezoneId' => 'getTimezoneId',
        'languageTag' => 'getLanguageTag',
        'evalPermRefs' => 'getEvalPermRefs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['profileId'] = isset($data['profileId']) ? $data['profileId'] : null;
        $this->container['profileUsername'] = isset($data['profileUsername']) ? $data['profileUsername'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['emailAddress'] = isset($data['emailAddress']) ? $data['emailAddress'] : null;
        $this->container['timezoneId'] = isset($data['timezoneId']) ? $data['timezoneId'] : null;
        $this->container['languageTag'] = isset($data['languageTag']) ? $data['languageTag'] : null;
        $this->container['evalPermRefs'] = isset($data['evalPermRefs']) ? $data['evalPermRefs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['profileId'] === null) {
            $invalidProperties[] = "'profileId' can't be null";
        }
        if ($this->container['profileUsername'] === null) {
            $invalidProperties[] = "'profileUsername' can't be null";
        }
        if ($this->container['displayName'] === null) {
            $invalidProperties[] = "'displayName' can't be null";
        }
        if ($this->container['timezoneId'] === null) {
            $invalidProperties[] = "'timezoneId' can't be null";
        }
        if ($this->container['languageTag'] === null) {
            $invalidProperties[] = "'languageTag' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['profileId'] === null) {
            return false;
        }
        if ($this->container['profileUsername'] === null) {
            return false;
        }
        if ($this->container['displayName'] === null) {
            return false;
        }
        if ($this->container['timezoneId'] === null) {
            return false;
        }
        if ($this->container['languageTag'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets profileId
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profileId'];
    }

    /**
     * Sets profileId
     *
     * @param string $profileId Internal profile ID (user@wtdomain)
     *
     * @return $this
     */
    public function setProfileId($profileId)
    {
        $this->container['profileId'] = $profileId;

        return $this;
    }

    /**
     * Gets profileUsername
     *
     * @return string
     */
    public function getProfileUsername()
    {
        return $this->container['profileUsername'];
    }

    /**
     * Sets profileUsername
     *
     * @param string $profileUsername Full profile username (user@domain.tld)
     *
     * @return $this
     */
    public function setProfileUsername($profileUsername)
    {
        $this->container['profileUsername'] = $profileUsername;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName Associated display name
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['emailAddress'];
    }

    /**
     * Sets emailAddress
     *
     * @param string $emailAddress Associated email address
     *
     * @return $this
     */
    public function setEmailAddress($emailAddress)
    {
        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }

    /**
     * Gets timezoneId
     *
     * @return string
     */
    public function getTimezoneId()
    {
        return $this->container['timezoneId'];
    }

    /**
     * Sets timezoneId
     *
     * @param string $timezoneId Timezone ID
     *
     * @return $this
     */
    public function setTimezoneId($timezoneId)
    {
        $this->container['timezoneId'] = $timezoneId;

        return $this;
    }

    /**
     * Gets languageTag
     *
     * @return string
     */
    public function getLanguageTag()
    {
        return $this->container['languageTag'];
    }

    /**
     * Sets languageTag
     *
     * @param string $languageTag Language identifier (language_country)
     *
     * @return $this
     */
    public function setLanguageTag($languageTag)
    {
        $this->container['languageTag'] = $languageTag;

        return $this;
    }

    /**
     * Gets evalPermRefs
     *
     * @return bool[]
     */
    public function getEvalPermRefs()
    {
        return $this->container['evalPermRefs'];
    }

    /**
     * Sets evalPermRefs
     *
     * @param bool[] $evalPermRefs evalPermRefs
     *
     * @return $this
     */
    public function setEvalPermRefs($evalPermRefs)
    {
        $this->container['evalPermRefs'] = $evalPermRefs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


