<?php
/**
 * DavApi
 * PHP version 5
 *
 * @category Class
 * @package  WT\Client\Contacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WebTop Contacts
 *
 * This is Contacts service API enpoint.
 *
 * OpenAPI spec version: v2
 * Contact: dev-team@sonicle.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WT\Client\Contacts\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WT\Client\Contacts\ApiException;
use WT\Client\Contacts\Configuration;
use WT\Client\Contacts\HeaderSelector;
use WT\Client\Contacts\ObjectSerializer;

/**
 * DavApi Class Doc Comment
 *
 * @category Class
 * @package  WT\Client\Contacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DavApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addAddressBook
     *
     * Adds a new address-book
     *
     * @param  \WT\Client\Contacts\Model\DavAddressBookNew $body body (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Contacts\Model\DavAddressBook
     */
    public function addAddressBook($body)
    {
        list($response) = $this->addAddressBookWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addAddressBookWithHttpInfo
     *
     * Adds a new address-book
     *
     * @param  \WT\Client\Contacts\Model\DavAddressBookNew $body (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Contacts\Model\DavAddressBook, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAddressBookWithHttpInfo($body)
    {
        $returnType = '\WT\Client\Contacts\Model\DavAddressBook';
        $request = $this->addAddressBookRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Contacts\Model\DavAddressBook',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAddressBookAsync
     *
     * Adds a new address-book
     *
     * @param  \WT\Client\Contacts\Model\DavAddressBookNew $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAddressBookAsync($body)
    {
        return $this->addAddressBookAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAddressBookAsyncWithHttpInfo
     *
     * Adds a new address-book
     *
     * @param  \WT\Client\Contacts\Model\DavAddressBookNew $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAddressBookAsyncWithHttpInfo($body)
    {
        $returnType = '\WT\Client\Contacts\Model\DavAddressBook';
        $request = $this->addAddressBookRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addAddressBook'
     *
     * @param  \WT\Client\Contacts\Model\DavAddressBookNew $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addAddressBookRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addAddressBook'
            );
        }

        $resourcePath = '/carddav/addressbooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = $this->config->getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addCard
     *
     * Adds a new card
     *
     * @param  \WT\Client\Contacts\Model\DavCardNew $body body (required)
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addCard($body, $addressBookUid)
    {
        $this->addCardWithHttpInfo($body, $addressBookUid);
    }

    /**
     * Operation addCardWithHttpInfo
     *
     * Adds a new card
     *
     * @param  \WT\Client\Contacts\Model\DavCardNew $body (required)
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCardWithHttpInfo($body, $addressBookUid)
    {
        $returnType = '';
        $request = $this->addCardRequest($body, $addressBookUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addCardAsync
     *
     * Adds a new card
     *
     * @param  \WT\Client\Contacts\Model\DavCardNew $body (required)
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCardAsync($body, $addressBookUid)
    {
        return $this->addCardAsyncWithHttpInfo($body, $addressBookUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCardAsyncWithHttpInfo
     *
     * Adds a new card
     *
     * @param  \WT\Client\Contacts\Model\DavCardNew $body (required)
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCardAsyncWithHttpInfo($body, $addressBookUid)
    {
        $returnType = '';
        $request = $this->addCardRequest($body, $addressBookUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCard'
     *
     * @param  \WT\Client\Contacts\Model\DavCardNew $body (required)
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addCardRequest($body, $addressBookUid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addCard'
            );
        }
        // verify the required parameter 'addressBookUid' is set
        if ($addressBookUid === null || (is_array($addressBookUid) && count($addressBookUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressBookUid when calling addCard'
            );
        }

        $resourcePath = '/carddav/addressbooks/{addressBookUid}/cards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($addressBookUid !== null) {
            $resourcePath = str_replace(
                '{' . 'addressBookUid' . '}',
                ObjectSerializer::toPathValue($addressBookUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = $this->config->getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAddressBook
     *
     * Deletes an address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAddressBook($addressBookUid)
    {
        $this->deleteAddressBookWithHttpInfo($addressBookUid);
    }

    /**
     * Operation deleteAddressBookWithHttpInfo
     *
     * Deletes an address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAddressBookWithHttpInfo($addressBookUid)
    {
        $returnType = '';
        $request = $this->deleteAddressBookRequest($addressBookUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAddressBookAsync
     *
     * Deletes an address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAddressBookAsync($addressBookUid)
    {
        return $this->deleteAddressBookAsyncWithHttpInfo($addressBookUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAddressBookAsyncWithHttpInfo
     *
     * Deletes an address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAddressBookAsyncWithHttpInfo($addressBookUid)
    {
        $returnType = '';
        $request = $this->deleteAddressBookRequest($addressBookUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAddressBook'
     *
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAddressBookRequest($addressBookUid)
    {
        // verify the required parameter 'addressBookUid' is set
        if ($addressBookUid === null || (is_array($addressBookUid) && count($addressBookUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressBookUid when calling deleteAddressBook'
            );
        }

        $resourcePath = '/carddav/addressbooks/{addressBookUid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($addressBookUid !== null) {
            $resourcePath = str_replace(
                '{' . 'addressBookUid' . '}',
                ObjectSerializer::toPathValue($addressBookUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = $this->config->getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCard
     *
     * Deletes a card
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCard($addressBookUid, $href)
    {
        $this->deleteCardWithHttpInfo($addressBookUid, $href);
    }

    /**
     * Operation deleteCardWithHttpInfo
     *
     * Deletes a card
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCardWithHttpInfo($addressBookUid, $href)
    {
        $returnType = '';
        $request = $this->deleteCardRequest($addressBookUid, $href);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCardAsync
     *
     * Deletes a card
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCardAsync($addressBookUid, $href)
    {
        return $this->deleteCardAsyncWithHttpInfo($addressBookUid, $href)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCardAsyncWithHttpInfo
     *
     * Deletes a card
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCardAsyncWithHttpInfo($addressBookUid, $href)
    {
        $returnType = '';
        $request = $this->deleteCardRequest($addressBookUid, $href);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCard'
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCardRequest($addressBookUid, $href)
    {
        // verify the required parameter 'addressBookUid' is set
        if ($addressBookUid === null || (is_array($addressBookUid) && count($addressBookUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressBookUid when calling deleteCard'
            );
        }
        // verify the required parameter 'href' is set
        if ($href === null || (is_array($href) && count($href) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $href when calling deleteCard'
            );
        }

        $resourcePath = '/carddav/addressbooks/{addressBookUid}/cards/{href}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($addressBookUid !== null) {
            $resourcePath = str_replace(
                '{' . 'addressBookUid' . '}',
                ObjectSerializer::toPathValue($addressBookUid),
                $resourcePath
            );
        }
        // path params
        if ($href !== null) {
            $resourcePath = str_replace(
                '{' . 'href' . '}',
                ObjectSerializer::toPathValue($href),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = $this->config->getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAddressBook
     *
     * Gets a single address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Contacts\Model\DavAddressBook
     */
    public function getAddressBook($addressBookUid)
    {
        list($response) = $this->getAddressBookWithHttpInfo($addressBookUid);
        return $response;
    }

    /**
     * Operation getAddressBookWithHttpInfo
     *
     * Gets a single address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Contacts\Model\DavAddressBook, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAddressBookWithHttpInfo($addressBookUid)
    {
        $returnType = '\WT\Client\Contacts\Model\DavAddressBook';
        $request = $this->getAddressBookRequest($addressBookUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Contacts\Model\DavAddressBook',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAddressBookAsync
     *
     * Gets a single address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddressBookAsync($addressBookUid)
    {
        return $this->getAddressBookAsyncWithHttpInfo($addressBookUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAddressBookAsyncWithHttpInfo
     *
     * Gets a single address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddressBookAsyncWithHttpInfo($addressBookUid)
    {
        $returnType = '\WT\Client\Contacts\Model\DavAddressBook';
        $request = $this->getAddressBookRequest($addressBookUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAddressBook'
     *
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAddressBookRequest($addressBookUid)
    {
        // verify the required parameter 'addressBookUid' is set
        if ($addressBookUid === null || (is_array($addressBookUid) && count($addressBookUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressBookUid when calling getAddressBook'
            );
        }

        $resourcePath = '/carddav/addressbooks/{addressBookUid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($addressBookUid !== null) {
            $resourcePath = str_replace(
                '{' . 'addressBookUid' . '}',
                ObjectSerializer::toPathValue($addressBookUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = $this->config->getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAddressBooks
     *
     * List all address-books
     *
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Contacts\Model\DavAddressBook[]
     */
    public function getAddressBooks()
    {
        list($response) = $this->getAddressBooksWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAddressBooksWithHttpInfo
     *
     * List all address-books
     *
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Contacts\Model\DavAddressBook[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAddressBooksWithHttpInfo()
    {
        $returnType = '\WT\Client\Contacts\Model\DavAddressBook[]';
        $request = $this->getAddressBooksRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Contacts\Model\DavAddressBook[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAddressBooksAsync
     *
     * List all address-books
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddressBooksAsync()
    {
        return $this->getAddressBooksAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAddressBooksAsyncWithHttpInfo
     *
     * List all address-books
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAddressBooksAsyncWithHttpInfo()
    {
        $returnType = '\WT\Client\Contacts\Model\DavAddressBook[]';
        $request = $this->getAddressBooksRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAddressBooks'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAddressBooksRequest()
    {

        $resourcePath = '/carddav/addressbooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = $this->config->getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCard
     *
     * Get a single card
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Contacts\Model\DavCard
     */
    public function getCard($addressBookUid, $href)
    {
        list($response) = $this->getCardWithHttpInfo($addressBookUid, $href);
        return $response;
    }

    /**
     * Operation getCardWithHttpInfo
     *
     * Get a single card
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Contacts\Model\DavCard, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCardWithHttpInfo($addressBookUid, $href)
    {
        $returnType = '\WT\Client\Contacts\Model\DavCard';
        $request = $this->getCardRequest($addressBookUid, $href);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Contacts\Model\DavCard',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCardAsync
     *
     * Get a single card
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCardAsync($addressBookUid, $href)
    {
        return $this->getCardAsyncWithHttpInfo($addressBookUid, $href)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCardAsyncWithHttpInfo
     *
     * Get a single card
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCardAsyncWithHttpInfo($addressBookUid, $href)
    {
        $returnType = '\WT\Client\Contacts\Model\DavCard';
        $request = $this->getCardRequest($addressBookUid, $href);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCard'
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCardRequest($addressBookUid, $href)
    {
        // verify the required parameter 'addressBookUid' is set
        if ($addressBookUid === null || (is_array($addressBookUid) && count($addressBookUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressBookUid when calling getCard'
            );
        }
        // verify the required parameter 'href' is set
        if ($href === null || (is_array($href) && count($href) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $href when calling getCard'
            );
        }

        $resourcePath = '/carddav/addressbooks/{addressBookUid}/cards/{href}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($addressBookUid !== null) {
            $resourcePath = str_replace(
                '{' . 'addressBookUid' . '}',
                ObjectSerializer::toPathValue($addressBookUid),
                $resourcePath
            );
        }
        // path params
        if ($href !== null) {
            $resourcePath = str_replace(
                '{' . 'href' . '}',
                ObjectSerializer::toPathValue($href),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = $this->config->getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCards
     *
     * List all cards for a specific address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string[] $hrefs hrefs (optional)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Contacts\Model\DavCard[]
     */
    public function getCards($addressBookUid, $hrefs = null)
    {
        list($response) = $this->getCardsWithHttpInfo($addressBookUid, $hrefs);
        return $response;
    }

    /**
     * Operation getCardsWithHttpInfo
     *
     * List all cards for a specific address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string[] $hrefs (optional)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Contacts\Model\DavCard[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCardsWithHttpInfo($addressBookUid, $hrefs = null)
    {
        $returnType = '\WT\Client\Contacts\Model\DavCard[]';
        $request = $this->getCardsRequest($addressBookUid, $hrefs);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Contacts\Model\DavCard[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCardsAsync
     *
     * List all cards for a specific address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string[] $hrefs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCardsAsync($addressBookUid, $hrefs = null)
    {
        return $this->getCardsAsyncWithHttpInfo($addressBookUid, $hrefs)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCardsAsyncWithHttpInfo
     *
     * List all cards for a specific address-book
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string[] $hrefs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCardsAsyncWithHttpInfo($addressBookUid, $hrefs = null)
    {
        $returnType = '\WT\Client\Contacts\Model\DavCard[]';
        $request = $this->getCardsRequest($addressBookUid, $hrefs);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCards'
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string[] $hrefs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCardsRequest($addressBookUid, $hrefs = null)
    {
        // verify the required parameter 'addressBookUid' is set
        if ($addressBookUid === null || (is_array($addressBookUid) && count($addressBookUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressBookUid when calling getCards'
            );
        }

        $resourcePath = '/carddav/addressbooks/{addressBookUid}/cards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
		if (is_array($hrefs)) {
			// serialization for arrays with 'multi' format will be skipped: param is returned as is!
			$hrefs = ObjectSerializer::serializeCollection($hrefs, 'multi', true);
		}
        if ($hrefs !== null) {
			// if still an array simply assign it to queryParams
            if (is_array($hrefs)) {
				$queryParams['hrefs'] = $hrefs;
			} else {
				$queryParams['hrefs'] = ObjectSerializer::toQueryValue($hrefs, null);
			}		
		}

        // path params
        if ($addressBookUid !== null) {
            $resourcePath = str_replace(
                '{' . 'addressBookUid' . '}',
                ObjectSerializer::toPathValue($addressBookUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = $this->config->getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCardsChanges
     *
     * Get card changes
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $syncToken Marks changes starting point (optional)
     * @param  int $limit Limits the number of returned results (optional)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WT\Client\Contacts\Model\DavCardsChanges
     */
    public function getCardsChanges($addressBookUid, $syncToken = null, $limit = null)
    {
        list($response) = $this->getCardsChangesWithHttpInfo($addressBookUid, $syncToken, $limit);
        return $response;
    }

    /**
     * Operation getCardsChangesWithHttpInfo
     *
     * Get card changes
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $syncToken Marks changes starting point (optional)
     * @param  int $limit Limits the number of returned results (optional)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WT\Client\Contacts\Model\DavCardsChanges, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCardsChangesWithHttpInfo($addressBookUid, $syncToken = null, $limit = null)
    {
        $returnType = '\WT\Client\Contacts\Model\DavCardsChanges';
        $request = $this->getCardsChangesRequest($addressBookUid, $syncToken, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WT\Client\Contacts\Model\DavCardsChanges',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCardsChangesAsync
     *
     * Get card changes
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $syncToken Marks changes starting point (optional)
     * @param  int $limit Limits the number of returned results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCardsChangesAsync($addressBookUid, $syncToken = null, $limit = null)
    {
        return $this->getCardsChangesAsyncWithHttpInfo($addressBookUid, $syncToken, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCardsChangesAsyncWithHttpInfo
     *
     * Get card changes
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $syncToken Marks changes starting point (optional)
     * @param  int $limit Limits the number of returned results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCardsChangesAsyncWithHttpInfo($addressBookUid, $syncToken = null, $limit = null)
    {
        $returnType = '\WT\Client\Contacts\Model\DavCardsChanges';
        $request = $this->getCardsChangesRequest($addressBookUid, $syncToken, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCardsChanges'
     *
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $syncToken Marks changes starting point (optional)
     * @param  int $limit Limits the number of returned results (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCardsChangesRequest($addressBookUid, $syncToken = null, $limit = null)
    {
        // verify the required parameter 'addressBookUid' is set
        if ($addressBookUid === null || (is_array($addressBookUid) && count($addressBookUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressBookUid when calling getCardsChanges'
            );
        }

        $resourcePath = '/carddav/addressbooks/{addressBookUid}/cards/changes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($syncToken !== null) {
			// if still an array simply assign it to queryParams
            if (is_array($syncToken)) {
				$queryParams['syncToken'] = $syncToken;
			} else {
				$queryParams['syncToken'] = ObjectSerializer::toQueryValue($syncToken, null);
			}		
		}
        // query params
        if ($limit !== null) {
			// if still an array simply assign it to queryParams
            if (is_array($limit)) {
				$queryParams['limit'] = $limit;
			} else {
				$queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
			}		
		}

        // path params
        if ($addressBookUid !== null) {
            $resourcePath = str_replace(
                '{' . 'addressBookUid' . '}',
                ObjectSerializer::toPathValue($addressBookUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = $this->config->getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAddressBook
     *
     * Updates an address-book
     *
     * @param  \WT\Client\Contacts\Model\DavAddressBookUpdate $body body (required)
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateAddressBook($body, $addressBookUid)
    {
        $this->updateAddressBookWithHttpInfo($body, $addressBookUid);
    }

    /**
     * Operation updateAddressBookWithHttpInfo
     *
     * Updates an address-book
     *
     * @param  \WT\Client\Contacts\Model\DavAddressBookUpdate $body (required)
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAddressBookWithHttpInfo($body, $addressBookUid)
    {
        $returnType = '';
        $request = $this->updateAddressBookRequest($body, $addressBookUid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateAddressBookAsync
     *
     * Updates an address-book
     *
     * @param  \WT\Client\Contacts\Model\DavAddressBookUpdate $body (required)
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAddressBookAsync($body, $addressBookUid)
    {
        return $this->updateAddressBookAsyncWithHttpInfo($body, $addressBookUid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAddressBookAsyncWithHttpInfo
     *
     * Updates an address-book
     *
     * @param  \WT\Client\Contacts\Model\DavAddressBookUpdate $body (required)
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAddressBookAsyncWithHttpInfo($body, $addressBookUid)
    {
        $returnType = '';
        $request = $this->updateAddressBookRequest($body, $addressBookUid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAddressBook'
     *
     * @param  \WT\Client\Contacts\Model\DavAddressBookUpdate $body (required)
     * @param  string $addressBookUid Address book UID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAddressBookRequest($body, $addressBookUid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateAddressBook'
            );
        }
        // verify the required parameter 'addressBookUid' is set
        if ($addressBookUid === null || (is_array($addressBookUid) && count($addressBookUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressBookUid when calling updateAddressBook'
            );
        }

        $resourcePath = '/carddav/addressbooks/{addressBookUid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($addressBookUid !== null) {
            $resourcePath = str_replace(
                '{' . 'addressBookUid' . '}',
                ObjectSerializer::toPathValue($addressBookUid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = $this->config->getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCard
     *
     * Updates a card
     *
     * @param  string $body body (required)
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateCard($body, $addressBookUid, $href)
    {
        $this->updateCardWithHttpInfo($body, $addressBookUid, $href);
    }

    /**
     * Operation updateCardWithHttpInfo
     *
     * Updates a card
     *
     * @param  string $body (required)
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \WT\Client\Contacts\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCardWithHttpInfo($body, $addressBookUid, $href)
    {
        $returnType = '';
        $request = $this->updateCardRequest($body, $addressBookUid, $href);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateCardAsync
     *
     * Updates a card
     *
     * @param  string $body (required)
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCardAsync($body, $addressBookUid, $href)
    {
        return $this->updateCardAsyncWithHttpInfo($body, $addressBookUid, $href)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCardAsyncWithHttpInfo
     *
     * Updates a card
     *
     * @param  string $body (required)
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCardAsyncWithHttpInfo($body, $addressBookUid, $href)
    {
        $returnType = '';
        $request = $this->updateCardRequest($body, $addressBookUid, $href);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCard'
     *
     * @param  string $body (required)
     * @param  string $addressBookUid Address book UID (required)
     * @param  string $href Card reference URI (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCardRequest($body, $addressBookUid, $href)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateCard'
            );
        }
        // verify the required parameter 'addressBookUid' is set
        if ($addressBookUid === null || (is_array($addressBookUid) && count($addressBookUid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $addressBookUid when calling updateCard'
            );
        }
        // verify the required parameter 'href' is set
        if ($href === null || (is_array($href) && count($href) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $href when calling updateCard'
            );
        }

        $resourcePath = '/carddav/addressbooks/{addressBookUid}/cards/{href}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($addressBookUid !== null) {
            $resourcePath = str_replace(
                '{' . 'addressBookUid' . '}',
                ObjectSerializer::toPathValue($addressBookUid),
                $resourcePath
            );
        }
        // path params
        if ($href !== null) {
            $resourcePath = str_replace(
                '{' . 'href' . '}',
                ObjectSerializer::toPathValue($href),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['text/vcard']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = $this->config->getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
