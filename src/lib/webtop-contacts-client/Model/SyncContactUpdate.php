<?php
/**
 * SyncContactUpdate
 *
 * PHP version 5
 *
 * @category Class
 * @package  WT\Client\Contacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WebTop Contacts
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: dev-team@sonicle.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WT\Client\Contacts\Model;

use \ArrayAccess;
use \WT\Client\Contacts\ObjectSerializer;

/**
 * SyncContactUpdate Class Doc Comment
 *
 * @category Class
 * @description Bean for carry message&#39;s updateable fields
 * @package  WT\Client\Contacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SyncContactUpdate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SyncContactUpdate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
        'firstName' => 'string',
        'lastName' => 'string',
        'nickname' => 'string',
        'mobile' => 'string',
        'pager1' => 'string',
        'pager2' => 'string',
        'email1' => 'string',
        'email2' => 'string',
        'email3' => 'string',
        'im1' => 'string',
        'im2' => 'string',
        'im3' => 'string',
        'workAddress' => 'string',
        'workPostalCode' => 'string',
        'workCity' => 'string',
        'workState' => 'string',
        'workCountry' => 'string',
        'workTelephone1' => 'string',
        'workTelephone2' => 'string',
        'workFax' => 'string',
        'homeAddress' => 'string',
        'homePostalCode' => 'string',
        'homeCity' => 'string',
        'homeState' => 'string',
        'homeCountry' => 'string',
        'homeTelephone1' => 'string',
        'homeTelephone2' => 'string',
        'homeFax' => 'string',
        'otherAddress' => 'string',
        'otherPostalCode' => 'string',
        'otherCity' => 'string',
        'otherState' => 'string',
        'otherCountry' => 'string',
        'companyId' => 'string',
        'companyName' => 'string',
        'function' => 'string',
        'department' => 'string',
        'manager' => 'string',
        'assistant' => 'string',
        'assistantTelephone' => 'string',
        'partner' => 'string',
        'birthday' => 'string',
        'anniversary' => 'string',
        'url' => 'string',
        'notes' => 'string',
        'picture' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title' => null,
        'firstName' => null,
        'lastName' => null,
        'nickname' => null,
        'mobile' => null,
        'pager1' => null,
        'pager2' => null,
        'email1' => null,
        'email2' => null,
        'email3' => null,
        'im1' => null,
        'im2' => null,
        'im3' => null,
        'workAddress' => null,
        'workPostalCode' => null,
        'workCity' => null,
        'workState' => null,
        'workCountry' => null,
        'workTelephone1' => null,
        'workTelephone2' => null,
        'workFax' => null,
        'homeAddress' => null,
        'homePostalCode' => null,
        'homeCity' => null,
        'homeState' => null,
        'homeCountry' => null,
        'homeTelephone1' => null,
        'homeTelephone2' => null,
        'homeFax' => null,
        'otherAddress' => null,
        'otherPostalCode' => null,
        'otherCity' => null,
        'otherState' => null,
        'otherCountry' => null,
        'companyId' => null,
        'companyName' => null,
        'function' => null,
        'department' => null,
        'manager' => null,
        'assistant' => null,
        'assistantTelephone' => null,
        'partner' => null,
        'birthday' => null,
        'anniversary' => null,
        'url' => null,
        'notes' => null,
        'picture' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'firstName' => 'firstName',
        'lastName' => 'lastName',
        'nickname' => 'nickname',
        'mobile' => 'mobile',
        'pager1' => 'pager1',
        'pager2' => 'pager2',
        'email1' => 'email1',
        'email2' => 'email2',
        'email3' => 'email3',
        'im1' => 'im1',
        'im2' => 'im2',
        'im3' => 'im3',
        'workAddress' => 'workAddress',
        'workPostalCode' => 'workPostalCode',
        'workCity' => 'workCity',
        'workState' => 'workState',
        'workCountry' => 'workCountry',
        'workTelephone1' => 'workTelephone1',
        'workTelephone2' => 'workTelephone2',
        'workFax' => 'workFax',
        'homeAddress' => 'homeAddress',
        'homePostalCode' => 'homePostalCode',
        'homeCity' => 'homeCity',
        'homeState' => 'homeState',
        'homeCountry' => 'homeCountry',
        'homeTelephone1' => 'homeTelephone1',
        'homeTelephone2' => 'homeTelephone2',
        'homeFax' => 'homeFax',
        'otherAddress' => 'otherAddress',
        'otherPostalCode' => 'otherPostalCode',
        'otherCity' => 'otherCity',
        'otherState' => 'otherState',
        'otherCountry' => 'otherCountry',
        'companyId' => 'companyId',
        'companyName' => 'companyName',
        'function' => 'function',
        'department' => 'department',
        'manager' => 'manager',
        'assistant' => 'assistant',
        'assistantTelephone' => 'assistantTelephone',
        'partner' => 'partner',
        'birthday' => 'birthday',
        'anniversary' => 'anniversary',
        'url' => 'url',
        'notes' => 'notes',
        'picture' => 'picture'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'firstName' => 'setFirstName',
        'lastName' => 'setLastName',
        'nickname' => 'setNickname',
        'mobile' => 'setMobile',
        'pager1' => 'setPager1',
        'pager2' => 'setPager2',
        'email1' => 'setEmail1',
        'email2' => 'setEmail2',
        'email3' => 'setEmail3',
        'im1' => 'setIm1',
        'im2' => 'setIm2',
        'im3' => 'setIm3',
        'workAddress' => 'setWorkAddress',
        'workPostalCode' => 'setWorkPostalCode',
        'workCity' => 'setWorkCity',
        'workState' => 'setWorkState',
        'workCountry' => 'setWorkCountry',
        'workTelephone1' => 'setWorkTelephone1',
        'workTelephone2' => 'setWorkTelephone2',
        'workFax' => 'setWorkFax',
        'homeAddress' => 'setHomeAddress',
        'homePostalCode' => 'setHomePostalCode',
        'homeCity' => 'setHomeCity',
        'homeState' => 'setHomeState',
        'homeCountry' => 'setHomeCountry',
        'homeTelephone1' => 'setHomeTelephone1',
        'homeTelephone2' => 'setHomeTelephone2',
        'homeFax' => 'setHomeFax',
        'otherAddress' => 'setOtherAddress',
        'otherPostalCode' => 'setOtherPostalCode',
        'otherCity' => 'setOtherCity',
        'otherState' => 'setOtherState',
        'otherCountry' => 'setOtherCountry',
        'companyId' => 'setCompanyId',
        'companyName' => 'setCompanyName',
        'function' => 'setFunction',
        'department' => 'setDepartment',
        'manager' => 'setManager',
        'assistant' => 'setAssistant',
        'assistantTelephone' => 'setAssistantTelephone',
        'partner' => 'setPartner',
        'birthday' => 'setBirthday',
        'anniversary' => 'setAnniversary',
        'url' => 'setUrl',
        'notes' => 'setNotes',
        'picture' => 'setPicture'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'firstName' => 'getFirstName',
        'lastName' => 'getLastName',
        'nickname' => 'getNickname',
        'mobile' => 'getMobile',
        'pager1' => 'getPager1',
        'pager2' => 'getPager2',
        'email1' => 'getEmail1',
        'email2' => 'getEmail2',
        'email3' => 'getEmail3',
        'im1' => 'getIm1',
        'im2' => 'getIm2',
        'im3' => 'getIm3',
        'workAddress' => 'getWorkAddress',
        'workPostalCode' => 'getWorkPostalCode',
        'workCity' => 'getWorkCity',
        'workState' => 'getWorkState',
        'workCountry' => 'getWorkCountry',
        'workTelephone1' => 'getWorkTelephone1',
        'workTelephone2' => 'getWorkTelephone2',
        'workFax' => 'getWorkFax',
        'homeAddress' => 'getHomeAddress',
        'homePostalCode' => 'getHomePostalCode',
        'homeCity' => 'getHomeCity',
        'homeState' => 'getHomeState',
        'homeCountry' => 'getHomeCountry',
        'homeTelephone1' => 'getHomeTelephone1',
        'homeTelephone2' => 'getHomeTelephone2',
        'homeFax' => 'getHomeFax',
        'otherAddress' => 'getOtherAddress',
        'otherPostalCode' => 'getOtherPostalCode',
        'otherCity' => 'getOtherCity',
        'otherState' => 'getOtherState',
        'otherCountry' => 'getOtherCountry',
        'companyId' => 'getCompanyId',
        'companyName' => 'getCompanyName',
        'function' => 'getFunction',
        'department' => 'getDepartment',
        'manager' => 'getManager',
        'assistant' => 'getAssistant',
        'assistantTelephone' => 'getAssistantTelephone',
        'partner' => 'getPartner',
        'birthday' => 'getBirthday',
        'anniversary' => 'getAnniversary',
        'url' => 'getUrl',
        'notes' => 'getNotes',
        'picture' => 'getPicture'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['pager1'] = isset($data['pager1']) ? $data['pager1'] : null;
        $this->container['pager2'] = isset($data['pager2']) ? $data['pager2'] : null;
        $this->container['email1'] = isset($data['email1']) ? $data['email1'] : null;
        $this->container['email2'] = isset($data['email2']) ? $data['email2'] : null;
        $this->container['email3'] = isset($data['email3']) ? $data['email3'] : null;
        $this->container['im1'] = isset($data['im1']) ? $data['im1'] : null;
        $this->container['im2'] = isset($data['im2']) ? $data['im2'] : null;
        $this->container['im3'] = isset($data['im3']) ? $data['im3'] : null;
        $this->container['workAddress'] = isset($data['workAddress']) ? $data['workAddress'] : null;
        $this->container['workPostalCode'] = isset($data['workPostalCode']) ? $data['workPostalCode'] : null;
        $this->container['workCity'] = isset($data['workCity']) ? $data['workCity'] : null;
        $this->container['workState'] = isset($data['workState']) ? $data['workState'] : null;
        $this->container['workCountry'] = isset($data['workCountry']) ? $data['workCountry'] : null;
        $this->container['workTelephone1'] = isset($data['workTelephone1']) ? $data['workTelephone1'] : null;
        $this->container['workTelephone2'] = isset($data['workTelephone2']) ? $data['workTelephone2'] : null;
        $this->container['workFax'] = isset($data['workFax']) ? $data['workFax'] : null;
        $this->container['homeAddress'] = isset($data['homeAddress']) ? $data['homeAddress'] : null;
        $this->container['homePostalCode'] = isset($data['homePostalCode']) ? $data['homePostalCode'] : null;
        $this->container['homeCity'] = isset($data['homeCity']) ? $data['homeCity'] : null;
        $this->container['homeState'] = isset($data['homeState']) ? $data['homeState'] : null;
        $this->container['homeCountry'] = isset($data['homeCountry']) ? $data['homeCountry'] : null;
        $this->container['homeTelephone1'] = isset($data['homeTelephone1']) ? $data['homeTelephone1'] : null;
        $this->container['homeTelephone2'] = isset($data['homeTelephone2']) ? $data['homeTelephone2'] : null;
        $this->container['homeFax'] = isset($data['homeFax']) ? $data['homeFax'] : null;
        $this->container['otherAddress'] = isset($data['otherAddress']) ? $data['otherAddress'] : null;
        $this->container['otherPostalCode'] = isset($data['otherPostalCode']) ? $data['otherPostalCode'] : null;
        $this->container['otherCity'] = isset($data['otherCity']) ? $data['otherCity'] : null;
        $this->container['otherState'] = isset($data['otherState']) ? $data['otherState'] : null;
        $this->container['otherCountry'] = isset($data['otherCountry']) ? $data['otherCountry'] : null;
        $this->container['companyId'] = isset($data['companyId']) ? $data['companyId'] : null;
        $this->container['companyName'] = isset($data['companyName']) ? $data['companyName'] : null;
        $this->container['function'] = isset($data['function']) ? $data['function'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['manager'] = isset($data['manager']) ? $data['manager'] : null;
        $this->container['assistant'] = isset($data['assistant']) ? $data['assistant'] : null;
        $this->container['assistantTelephone'] = isset($data['assistantTelephone']) ? $data['assistantTelephone'] : null;
        $this->container['partner'] = isset($data['partner']) ? $data['partner'] : null;
        $this->container['birthday'] = isset($data['birthday']) ? $data['birthday'] : null;
        $this->container['anniversary'] = isset($data['anniversary']) ? $data['anniversary'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['picture'] = isset($data['picture']) ? $data['picture'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName First name
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName Last name
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string $nickname Nickname
     *
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile Mobile phone
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets pager1
     *
     * @return string
     */
    public function getPager1()
    {
        return $this->container['pager1'];
    }

    /**
     * Sets pager1
     *
     * @param string $pager1 Pager 1
     *
     * @return $this
     */
    public function setPager1($pager1)
    {
        $this->container['pager1'] = $pager1;

        return $this;
    }

    /**
     * Gets pager2
     *
     * @return string
     */
    public function getPager2()
    {
        return $this->container['pager2'];
    }

    /**
     * Sets pager2
     *
     * @param string $pager2 Pager 2
     *
     * @return $this
     */
    public function setPager2($pager2)
    {
        $this->container['pager2'] = $pager2;

        return $this;
    }

    /**
     * Gets email1
     *
     * @return string
     */
    public function getEmail1()
    {
        return $this->container['email1'];
    }

    /**
     * Sets email1
     *
     * @param string $email1 Email address 1
     *
     * @return $this
     */
    public function setEmail1($email1)
    {
        $this->container['email1'] = $email1;

        return $this;
    }

    /**
     * Gets email2
     *
     * @return string
     */
    public function getEmail2()
    {
        return $this->container['email2'];
    }

    /**
     * Sets email2
     *
     * @param string $email2 Email address 2
     *
     * @return $this
     */
    public function setEmail2($email2)
    {
        $this->container['email2'] = $email2;

        return $this;
    }

    /**
     * Gets email3
     *
     * @return string
     */
    public function getEmail3()
    {
        return $this->container['email3'];
    }

    /**
     * Sets email3
     *
     * @param string $email3 Email address 3
     *
     * @return $this
     */
    public function setEmail3($email3)
    {
        $this->container['email3'] = $email3;

        return $this;
    }

    /**
     * Gets im1
     *
     * @return string
     */
    public function getIm1()
    {
        return $this->container['im1'];
    }

    /**
     * Sets im1
     *
     * @param string $im1 Instant Msg. 1
     *
     * @return $this
     */
    public function setIm1($im1)
    {
        $this->container['im1'] = $im1;

        return $this;
    }

    /**
     * Gets im2
     *
     * @return string
     */
    public function getIm2()
    {
        return $this->container['im2'];
    }

    /**
     * Sets im2
     *
     * @param string $im2 Instant Msg. 2
     *
     * @return $this
     */
    public function setIm2($im2)
    {
        $this->container['im2'] = $im2;

        return $this;
    }

    /**
     * Gets im3
     *
     * @return string
     */
    public function getIm3()
    {
        return $this->container['im3'];
    }

    /**
     * Sets im3
     *
     * @param string $im3 Instant Msg. 3
     *
     * @return $this
     */
    public function setIm3($im3)
    {
        $this->container['im3'] = $im3;

        return $this;
    }

    /**
     * Gets workAddress
     *
     * @return string
     */
    public function getWorkAddress()
    {
        return $this->container['workAddress'];
    }

    /**
     * Sets workAddress
     *
     * @param string $workAddress Business address
     *
     * @return $this
     */
    public function setWorkAddress($workAddress)
    {
        $this->container['workAddress'] = $workAddress;

        return $this;
    }

    /**
     * Gets workPostalCode
     *
     * @return string
     */
    public function getWorkPostalCode()
    {
        return $this->container['workPostalCode'];
    }

    /**
     * Sets workPostalCode
     *
     * @param string $workPostalCode Business postal code
     *
     * @return $this
     */
    public function setWorkPostalCode($workPostalCode)
    {
        $this->container['workPostalCode'] = $workPostalCode;

        return $this;
    }

    /**
     * Gets workCity
     *
     * @return string
     */
    public function getWorkCity()
    {
        return $this->container['workCity'];
    }

    /**
     * Sets workCity
     *
     * @param string $workCity Business city
     *
     * @return $this
     */
    public function setWorkCity($workCity)
    {
        $this->container['workCity'] = $workCity;

        return $this;
    }

    /**
     * Gets workState
     *
     * @return string
     */
    public function getWorkState()
    {
        return $this->container['workState'];
    }

    /**
     * Sets workState
     *
     * @param string $workState Business state/province
     *
     * @return $this
     */
    public function setWorkState($workState)
    {
        $this->container['workState'] = $workState;

        return $this;
    }

    /**
     * Gets workCountry
     *
     * @return string
     */
    public function getWorkCountry()
    {
        return $this->container['workCountry'];
    }

    /**
     * Sets workCountry
     *
     * @param string $workCountry Business country
     *
     * @return $this
     */
    public function setWorkCountry($workCountry)
    {
        $this->container['workCountry'] = $workCountry;

        return $this;
    }

    /**
     * Gets workTelephone1
     *
     * @return string
     */
    public function getWorkTelephone1()
    {
        return $this->container['workTelephone1'];
    }

    /**
     * Sets workTelephone1
     *
     * @param string $workTelephone1 Business telephone 1
     *
     * @return $this
     */
    public function setWorkTelephone1($workTelephone1)
    {
        $this->container['workTelephone1'] = $workTelephone1;

        return $this;
    }

    /**
     * Gets workTelephone2
     *
     * @return string
     */
    public function getWorkTelephone2()
    {
        return $this->container['workTelephone2'];
    }

    /**
     * Sets workTelephone2
     *
     * @param string $workTelephone2 Business telephone 2
     *
     * @return $this
     */
    public function setWorkTelephone2($workTelephone2)
    {
        $this->container['workTelephone2'] = $workTelephone2;

        return $this;
    }

    /**
     * Gets workFax
     *
     * @return string
     */
    public function getWorkFax()
    {
        return $this->container['workFax'];
    }

    /**
     * Sets workFax
     *
     * @param string $workFax Business fax
     *
     * @return $this
     */
    public function setWorkFax($workFax)
    {
        $this->container['workFax'] = $workFax;

        return $this;
    }

    /**
     * Gets homeAddress
     *
     * @return string
     */
    public function getHomeAddress()
    {
        return $this->container['homeAddress'];
    }

    /**
     * Sets homeAddress
     *
     * @param string $homeAddress Home address
     *
     * @return $this
     */
    public function setHomeAddress($homeAddress)
    {
        $this->container['homeAddress'] = $homeAddress;

        return $this;
    }

    /**
     * Gets homePostalCode
     *
     * @return string
     */
    public function getHomePostalCode()
    {
        return $this->container['homePostalCode'];
    }

    /**
     * Sets homePostalCode
     *
     * @param string $homePostalCode Home postal code
     *
     * @return $this
     */
    public function setHomePostalCode($homePostalCode)
    {
        $this->container['homePostalCode'] = $homePostalCode;

        return $this;
    }

    /**
     * Gets homeCity
     *
     * @return string
     */
    public function getHomeCity()
    {
        return $this->container['homeCity'];
    }

    /**
     * Sets homeCity
     *
     * @param string $homeCity Home city
     *
     * @return $this
     */
    public function setHomeCity($homeCity)
    {
        $this->container['homeCity'] = $homeCity;

        return $this;
    }

    /**
     * Gets homeState
     *
     * @return string
     */
    public function getHomeState()
    {
        return $this->container['homeState'];
    }

    /**
     * Sets homeState
     *
     * @param string $homeState Home state
     *
     * @return $this
     */
    public function setHomeState($homeState)
    {
        $this->container['homeState'] = $homeState;

        return $this;
    }

    /**
     * Gets homeCountry
     *
     * @return string
     */
    public function getHomeCountry()
    {
        return $this->container['homeCountry'];
    }

    /**
     * Sets homeCountry
     *
     * @param string $homeCountry Home country
     *
     * @return $this
     */
    public function setHomeCountry($homeCountry)
    {
        $this->container['homeCountry'] = $homeCountry;

        return $this;
    }

    /**
     * Gets homeTelephone1
     *
     * @return string
     */
    public function getHomeTelephone1()
    {
        return $this->container['homeTelephone1'];
    }

    /**
     * Sets homeTelephone1
     *
     * @param string $homeTelephone1 Home telephone 1
     *
     * @return $this
     */
    public function setHomeTelephone1($homeTelephone1)
    {
        $this->container['homeTelephone1'] = $homeTelephone1;

        return $this;
    }

    /**
     * Gets homeTelephone2
     *
     * @return string
     */
    public function getHomeTelephone2()
    {
        return $this->container['homeTelephone2'];
    }

    /**
     * Sets homeTelephone2
     *
     * @param string $homeTelephone2 Home telephone 2
     *
     * @return $this
     */
    public function setHomeTelephone2($homeTelephone2)
    {
        $this->container['homeTelephone2'] = $homeTelephone2;

        return $this;
    }

    /**
     * Gets homeFax
     *
     * @return string
     */
    public function getHomeFax()
    {
        return $this->container['homeFax'];
    }

    /**
     * Sets homeFax
     *
     * @param string $homeFax Home fax
     *
     * @return $this
     */
    public function setHomeFax($homeFax)
    {
        $this->container['homeFax'] = $homeFax;

        return $this;
    }

    /**
     * Gets otherAddress
     *
     * @return string
     */
    public function getOtherAddress()
    {
        return $this->container['otherAddress'];
    }

    /**
     * Sets otherAddress
     *
     * @param string $otherAddress Other address
     *
     * @return $this
     */
    public function setOtherAddress($otherAddress)
    {
        $this->container['otherAddress'] = $otherAddress;

        return $this;
    }

    /**
     * Gets otherPostalCode
     *
     * @return string
     */
    public function getOtherPostalCode()
    {
        return $this->container['otherPostalCode'];
    }

    /**
     * Sets otherPostalCode
     *
     * @param string $otherPostalCode Other postal code
     *
     * @return $this
     */
    public function setOtherPostalCode($otherPostalCode)
    {
        $this->container['otherPostalCode'] = $otherPostalCode;

        return $this;
    }

    /**
     * Gets otherCity
     *
     * @return string
     */
    public function getOtherCity()
    {
        return $this->container['otherCity'];
    }

    /**
     * Sets otherCity
     *
     * @param string $otherCity Other city
     *
     * @return $this
     */
    public function setOtherCity($otherCity)
    {
        $this->container['otherCity'] = $otherCity;

        return $this;
    }

    /**
     * Gets otherState
     *
     * @return string
     */
    public function getOtherState()
    {
        return $this->container['otherState'];
    }

    /**
     * Sets otherState
     *
     * @param string $otherState Other state
     *
     * @return $this
     */
    public function setOtherState($otherState)
    {
        $this->container['otherState'] = $otherState;

        return $this;
    }

    /**
     * Gets otherCountry
     *
     * @return string
     */
    public function getOtherCountry()
    {
        return $this->container['otherCountry'];
    }

    /**
     * Sets otherCountry
     *
     * @param string $otherCountry Other country
     *
     * @return $this
     */
    public function setOtherCountry($otherCountry)
    {
        $this->container['otherCountry'] = $otherCountry;

        return $this;
    }

    /**
     * Gets companyId
     *
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['companyId'];
    }

    /**
     * Sets companyId
     *
     * @param string $companyId Company ID
     *
     * @return $this
     */
    public function setCompanyId($companyId)
    {
        $this->container['companyId'] = $companyId;

        return $this;
    }

    /**
     * Gets companyName
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     *
     * @param string $companyName Company name
     *
     * @return $this
     */
    public function setCompanyName($companyName)
    {
        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets function
     *
     * @return string
     */
    public function getFunction()
    {
        return $this->container['function'];
    }

    /**
     * Sets function
     *
     * @param string $function Job title
     *
     * @return $this
     */
    public function setFunction($function)
    {
        $this->container['function'] = $function;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department Department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets manager
     *
     * @return string
     */
    public function getManager()
    {
        return $this->container['manager'];
    }

    /**
     * Sets manager
     *
     * @param string $manager Manager name
     *
     * @return $this
     */
    public function setManager($manager)
    {
        $this->container['manager'] = $manager;

        return $this;
    }

    /**
     * Gets assistant
     *
     * @return string
     */
    public function getAssistant()
    {
        return $this->container['assistant'];
    }

    /**
     * Sets assistant
     *
     * @param string $assistant Assistant name
     *
     * @return $this
     */
    public function setAssistant($assistant)
    {
        $this->container['assistant'] = $assistant;

        return $this;
    }

    /**
     * Gets assistantTelephone
     *
     * @return string
     */
    public function getAssistantTelephone()
    {
        return $this->container['assistantTelephone'];
    }

    /**
     * Sets assistantTelephone
     *
     * @param string $assistantTelephone Assistant telephone
     *
     * @return $this
     */
    public function setAssistantTelephone($assistantTelephone)
    {
        $this->container['assistantTelephone'] = $assistantTelephone;

        return $this;
    }

    /**
     * Gets partner
     *
     * @return string
     */
    public function getPartner()
    {
        return $this->container['partner'];
    }

    /**
     * Sets partner
     *
     * @param string $partner Partner
     *
     * @return $this
     */
    public function setPartner($partner)
    {
        $this->container['partner'] = $partner;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return string
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param string $birthday Birthday date (ISO date YYYYMMDD)
     *
     * @return $this
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets anniversary
     *
     * @return string
     */
    public function getAnniversary()
    {
        return $this->container['anniversary'];
    }

    /**
     * Sets anniversary
     *
     * @param string $anniversary Anniversary date (ISO date YYYYMMDD)
     *
     * @return $this
     */
    public function setAnniversary($anniversary)
    {
        $this->container['anniversary'] = $anniversary;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Web-site URL
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return string
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param string $picture Image base64 data URI
     *
     * @return $this
     */
    public function setPicture($picture)
    {
        $this->container['picture'] = $picture;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


