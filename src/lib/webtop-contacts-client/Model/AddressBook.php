<?php
/**
 * AddressBook
 *
 * PHP version 5
 *
 * @category Class
 * @package  WT\Client\Contacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WebTop Contacts
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: dev-team@sonicle.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WT\Client\Contacts\Model;

use \ArrayAccess;
use \WT\Client\Contacts\ObjectSerializer;

/**
 * AddressBook Class Doc Comment
 *
 * @category Class
 * @description Bean for carry addressbook&#39;s fields
 * @package  WT\Client\Contacts
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddressBook implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddressBook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'uid' => 'string',
        'displayName' => 'string',
        'description' => 'string',
        'syncToken' => 'string',
        'aclFol' => 'string',
        'aclEle' => 'string',
        'ownerUsername' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'uid' => null,
        'displayName' => null,
        'description' => null,
        'syncToken' => null,
        'aclFol' => null,
        'aclEle' => null,
        'ownerUsername' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uid' => 'uid',
        'displayName' => 'displayName',
        'description' => 'description',
        'syncToken' => 'syncToken',
        'aclFol' => 'aclFol',
        'aclEle' => 'aclEle',
        'ownerUsername' => 'ownerUsername'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uid' => 'setUid',
        'displayName' => 'setDisplayName',
        'description' => 'setDescription',
        'syncToken' => 'setSyncToken',
        'aclFol' => 'setAclFol',
        'aclEle' => 'setAclEle',
        'ownerUsername' => 'setOwnerUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uid' => 'getUid',
        'displayName' => 'getDisplayName',
        'description' => 'getDescription',
        'syncToken' => 'getSyncToken',
        'aclFol' => 'getAclFol',
        'aclEle' => 'getAclEle',
        'ownerUsername' => 'getOwnerUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['syncToken'] = isset($data['syncToken']) ? $data['syncToken'] : null;
        $this->container['aclFol'] = isset($data['aclFol']) ? $data['aclFol'] : null;
        $this->container['aclEle'] = isset($data['aclEle']) ? $data['aclEle'] : null;
        $this->container['ownerUsername'] = isset($data['ownerUsername']) ? $data['ownerUsername'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['uid'] === null) {
            $invalidProperties[] = "'uid' can't be null";
        }
        if ($this->container['displayName'] === null) {
            $invalidProperties[] = "'displayName' can't be null";
        }
        if ($this->container['syncToken'] === null) {
            $invalidProperties[] = "'syncToken' can't be null";
        }
        if ($this->container['aclFol'] === null) {
            $invalidProperties[] = "'aclFol' can't be null";
        }
        if ($this->container['aclEle'] === null) {
            $invalidProperties[] = "'aclEle' can't be null";
        }
        if ($this->container['ownerUsername'] === null) {
            $invalidProperties[] = "'ownerUsername' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['uid'] === null) {
            return false;
        }
        if ($this->container['displayName'] === null) {
            return false;
        }
        if ($this->container['syncToken'] === null) {
            return false;
        }
        if ($this->container['aclFol'] === null) {
            return false;
        }
        if ($this->container['aclEle'] === null) {
            return false;
        }
        if ($this->container['ownerUsername'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id AddressBook ID (internal)
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid AddressBook UID (public)
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName Display name
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets syncToken
     *
     * @return string
     */
    public function getSyncToken()
    {
        return $this->container['syncToken'];
    }

    /**
     * Sets syncToken
     *
     * @param string $syncToken Current sync token
     *
     * @return $this
     */
    public function setSyncToken($syncToken)
    {
        $this->container['syncToken'] = $syncToken;

        return $this;
    }

    /**
     * Gets aclFol
     *
     * @return string
     */
    public function getAclFol()
    {
        return $this->container['aclFol'];
    }

    /**
     * Sets aclFol
     *
     * @param string $aclFol ACL info for folder itself
     *
     * @return $this
     */
    public function setAclFol($aclFol)
    {
        $this->container['aclFol'] = $aclFol;

        return $this;
    }

    /**
     * Gets aclEle
     *
     * @return string
     */
    public function getAclEle()
    {
        return $this->container['aclEle'];
    }

    /**
     * Sets aclEle
     *
     * @param string $aclEle ACL info for folder elements
     *
     * @return $this
     */
    public function setAclEle($aclEle)
    {
        $this->container['aclEle'] = $aclEle;

        return $this;
    }

    /**
     * Gets ownerUsername
     *
     * @return string
     */
    public function getOwnerUsername()
    {
        return $this->container['ownerUsername'];
    }

    /**
     * Sets ownerUsername
     *
     * @param string $ownerUsername The owner profile's username
     *
     * @return $this
     */
    public function setOwnerUsername($ownerUsername)
    {
        $this->container['ownerUsername'] = $ownerUsername;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


